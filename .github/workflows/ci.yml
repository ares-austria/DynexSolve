name: CI

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

jobs:
  ubuntu-18_04:
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        arch: [
          "core-avx2",
          "core2",
          "nocona",
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: DynexSolve
      - name: Checkout Dynex repo
        uses: actions/checkout@v3
        with:
          repository: dynexcoin/Dynex
          path: Dynex
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.18.x'
      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
          linux-local-args: '["--toolkit"]'
      - name: Verify CUDA Install
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          (
          cd DynexSolve;
          echo "git_hash=$(git rev-parse --short=7 "$GITHUB_SHA")" >> $GITHUB_OUTPUT
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')" >> $GITHUB_OUTPUT
          )
      - name: install apt-get deps
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev libcurl4-openssl-dev
          sudo apt-get install libdb++-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils ccache python3 python3-pip python3-setuptools python-setuptools
          sudo apt-get install libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev
      - name: build Dynex
        run: |
          (
          rm -rf Dynex/build;
          mkdir -p Dynex/build;
          cd Dynex/build;
          cmake -DCMAKE_CXX_FLAGS=-march=${{ matrix.arch }} -mtune=generic -DCMAKE_C_FLAGS=-march=${{ matrix.arch }} -mtune=generic ..;
          make -j2;
          )
      - name: build DynexSolve
        run: |
          (
          rm -rf DynexSolve/build;
          mkdir -p DynexSolve/build;
          cd DynexSolve && cp ../Dynex/build/src/libCrypto.a .;
          CC="-std=c++11 -ccbin=g++ -Xcompiler -mtune=generic -Xcompiler -static-libgcc -Xcompiler -static-libstdc++ -Xcompiler -march=${{ matrix.arch }}" \
          nvcc ${CC} ip_sockets.cpp portability_fixes.cpp tcp_sockets.cpp dprintf.cpp jsonxx.cc Dynexchip.cpp kernel.cu -o dynexsolve -O4 -lcurl libCrypto.a;
          )
      - name: create artifacts
        if: success()
        run: |
          mkdir -p ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          mv ./DynexSolve/dynexsolve ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}/dynexsolve
          mv ./DynexSolve/release DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: Archive artifacts on GH
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-ubuntu-18.04-linux-x64-${{ matrix.arch }}
          path: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}

  ubuntu-20_04:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [
          "core-avx2",
          "core2",
          "nocona",
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: DynexSolve
      - name: Checkout Dynex repo
        uses: actions/checkout@v3
        with:
          repository: dynexcoin/Dynex
          path: Dynex
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.18.x'
      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
          linux-local-args: '["--toolkit"]'
      - name: Verify CUDA Install
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          (
          cd DynexSolve;
          echo "git_hash=$(git rev-parse --short=7 "$GITHUB_SHA")" >> $GITHUB_OUTPUT
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')" >> $GITHUB_OUTPUT
          )
      - name: install apt-get deps
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev libcurl4-openssl-dev
          sudo apt-get install libdb++-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils ccache python3 python3-pip python3-setuptools python-setuptools
          sudo apt-get install libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev
      - name: build Dynex
        run: |
          (
          rm -rf Dynex/build;
          mkdir -p Dynex/build;
          cd Dynex/build;
          cmake -DCMAKE_CXX_FLAGS=-march=${{ matrix.arch }} -mtune=generic -DCMAKE_C_FLAGS=-march=${{ matrix.arch }} -mtune=generic ..;
          make -j2;
          )
      - name: build DynexSolve
        run: |
          (
          rm -rf DynexSolve/build;
          mkdir -p DynexSolve/build;
          cd DynexSolve && cp ../Dynex/build/src/libCrypto.a .;
          CC="-std=c++11 -ccbin=g++ -Xcompiler -mtune=generic -Xcompiler -static-libgcc -Xcompiler -static-libstdc++ -Xcompiler -march=${{ matrix.arch }}" \
          nvcc ${CC} ip_sockets.cpp portability_fixes.cpp tcp_sockets.cpp dprintf.cpp jsonxx.cc Dynexchip.cpp kernel.cu -o dynexsolve -O4 -lcurl libCrypto.a;
          )
      - name: create artifacts
        if: success()
        run: |
          mkdir -p ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          mv ./DynexSolve/dynexsolve ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}/dynexsolve
          mv ./DynexSolve/release DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: Archive artifacts on GH
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-ubuntu-20.04-linux-x64-${{ matrix.arch }}
          path: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}

  ubuntu-22_04:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        arch: [
          "core-avx2",
          "core2",
          "nocona",
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: DynexSolve
      - name: Checkout Dynex repo
        uses: actions/checkout@v3
        with:
          repository: dynexcoin/Dynex
          path: Dynex
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.13
        with:
          cmake-version: '3.18.x'
      - name: Setup CUDA Toolkit
        uses: Jimver/cuda-toolkit@v0.2.8
        id: cuda-toolkit
        with:
          cuda: '11.7.0'
          linux-local-args: '["--toolkit"]'
      - name: Verify CUDA Install
        run: |
          echo "Installed cuda version is: ${{steps.cuda-toolkit.outputs.cuda}}"
          echo "Cuda install location: ${{steps.cuda-toolkit.outputs.CUDA_PATH}}"
          nvcc -V
      - name: Extract branch name & commit
        id: extract_branch
        run: |
          (
          cd DynexSolve;
          echo "git_hash=$(git rev-parse --short=7 "$GITHUB_SHA")" >> $GITHUB_OUTPUT
          echo "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//\./g')" >> $GITHUB_OUTPUT
          )
      - name: install apt-get deps
        run: |
          sudo apt-get update
          sudo apt-get install libboost-all-dev libcurl4-openssl-dev
          sudo apt-get install libdb++-dev build-essential libtool autotools-dev automake pkg-config bsdmainutils ccache python3 python3-pip python3-setuptools python-setuptools
          sudo apt-get install libevent-dev python3-zmq python3-dev libboost-python-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libminiupnpc-dev libzmq3-dev
      - name: build Dynex
        run: |
          (
          rm -rf Dynex/build;
          mkdir -p Dynex/build;
          cd Dynex/build;
          cmake -DCMAKE_CXX_FLAGS=-march=${{ matrix.arch }} -mtune=generic -DCMAKE_C_FLAGS=-march=${{ matrix.arch }} -mtune=generic ..;
          make -j2;
          )
      - name: build DynexSolve
        run: |
          (
          rm -rf DynexSolve/build;
          mkdir -p DynexSolve/build;
          cd DynexSolve && cp ../Dynex/build/src/libCrypto.a .;
          CC="-std=c++11 -ccbin=g++ -Xcompiler -mtune=generic -Xcompiler -static-libgcc -Xcompiler -static-libstdc++ -Xcompiler -march=${{ matrix.arch }}" \
          nvcc ${CC} ip_sockets.cpp portability_fixes.cpp tcp_sockets.cpp dprintf.cpp jsonxx.cc Dynexchip.cpp kernel.cu -o dynexsolve -O4 -lcurl libCrypto.a;
          )
      - name: create artifacts
        if: success()
        run: |
          mkdir -p ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
          mv ./DynexSolve/dynexsolve ./DynexSolve/release/DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}/dynexsolve
          mv ./DynexSolve/release DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}
      - name: Archive artifacts on GH
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}-ubuntu-22.04-linux-x64-${{ matrix.arch }}
          path: DynexSolve-${{ steps.extract_branch.outputs.branch }}-${{ steps.extract_branch.outputs.git_hash }}

